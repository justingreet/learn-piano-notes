{"version":3,"sources":["note-detection.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,sBAAsB,QAAQ,MAAR,CAAe,mCAAf,CAAtB;AACJ,oBAAoB,UAApB,CAA+B,yBAA/B,EAA0D,CACxD,qBADwD,EACjC,UAAS,mBAAT,EAA8B;AACnD,MAAI,OAAO,IAAP,CAD+C;;AAGnD,OAAK,IAAL,GAAY,YAAW;;;;;;;AAOrB,SAAK,OAAL,GAAe,IAAf;;;AAPqB,QAUrB,CAAK,MAAL,GAAc,IAAI,YAAJ,CAAiB,KAAK,OAAL,CAA/B,CAVqB;AAWrB,SAAK,YAAL,GAAoB,IAAI,YAAJ,EAApB;;;AAXqB,QAcrB,CAAK,WAAL,GAAmB,KAAK,YAAL,CAAkB,UAAlB,CAdE;AAerB,wBAAoB,aAApB,CAAkC,KAAK,WAAL,CAAlC;;;;;;;AAfqB,QAuBjB,gBAAgB,SAAhB,aAAgB,CAAS,MAAT,EAAiB;;AAEnC,UAAI,oBACA,KAAK,YAAL,CAAkB,uBAAlB,CAA0C,MAA1C,CADA;;;AAF+B,UAMnC,CAAK,QAAL,GAAgB,KAAK,YAAL,CAAkB,cAAlB,EAAhB,CANmC;AAOnC,WAAK,QAAL,CAAc,OAAd,GAAwB,IAAxB;;AAPmC,uBASnC,CAAkB,OAAlB,CAA0B,KAAK,QAAL,CAA1B,CATmC;;AAWnC,aAAO,WAAP,CAAmB,KAAK,UAAL,EAAiB,EAApC,EAXmC;KAAjB,CAvBC;;AAqCrB,QAAI,QAAQ,SAAR,KAAQ,GAAW;AACrB,cAAQ,GAAR,CAAY,eAAZ,EADqB;KAAX,CArCS;;AAyCrB,cAAU,YAAV,GACI,UAAU,YAAV,IACA,UAAU,kBAAV,IACA,UAAU,eAAV,CA5CiB;AA6CrB,cAAU,YAAV,CAAwB,EAAC,OAAO,IAAP,EAAzB,EAAwC,aAAxC,EAAuD,KAAvD,EA7CqB;GAAX,CAHuC;;AAmDnD,OAAK,UAAL,GAAkB,YAAW;AAC3B,SAAK,QAAL,CAAc,sBAAd,CAAqC,KAAK,MAAL,CAArC,CAD2B;AAE3B,QAAI,eAAe,oBAAoB,YAApB,CAAiC,KAAK,MAAL,CAAhD,CAFuB;;AAI3B,aAAS,cAAT,CAAwB,OAAxB,EAAiC,SAAjC,GAA6C,YAA7C,CAJ2B;GAAX,CAnDiC;;AA0DnD,OAAK,IAAL,GA1DmD;CAA9B,CADzB","file":"note-detection-compiled.js","sourcesContent":["'use strict';\n\nvar noteDetectionModule = angular.module('pianoPitchDetector.note-detection');\nnoteDetectionModule.controller('NoteDetectionController', [\n  'noteDetectorService', function(noteDetectorService) {\n    var self = this;\n\n    this.init = function() {\n      /**\n       * @type {number} The number of data points we capture from the mic.\n       * This is the smallest power of 2 that allows us to capture at least\n       * 2 instances of the lowest piano note (which has frequency 27.5) at a\n       * sample rate of 44,100. The buffer should capture 9% of a second.\n       */\n      self.BUF_LEN = 4096;\n\n      /** @type {Float32Array} The array that stores the mic data points. */\n      self.buffer = new Float32Array(this.BUF_LEN);\n      self.audioContext = new AudioContext();\n\n      /** @type {number} The sample rate of the audio context. */\n      self.SAMPLE_RATE = self.audioContext.sampleRate;\n      noteDetectorService.setSampleRate(self.SAMPLE_RATE);\n\n\n      /**\n       * Create an Audio Node for the input from the user's mic, an Audio Node\n       * to analyze that data, and hook them together.\n       * @param stream The media stream from the user's mic\n       */\n      var initDetection = function(stream) {\n        // Create an AudioNode from the stream.\n        var mediaStreamSource =\n            self.audioContext.createMediaStreamSource(stream);\n\n        // Create an analyser node.\n        self.analyser = self.audioContext.createAnalyser();\n        self.analyser.fftSize = 2048;\n        // Take the output of the stream and pass it to the analyser as input.\n        mediaStreamSource.connect(self.analyser);\n\n        window.setInterval(self.detectNote, 94);\n      };\n\n      var error = function() {\n        console.log('ERROR! ERROR!');\n      };\n\n      navigator.getUserMedia =\n          navigator.getUserMedia ||\n          navigator.webkitGetUserMedia ||\n          navigator.mozGetUserMedia;\n      navigator.getUserMedia(({audio: true}), initDetection, error);\n    };\n\n    this.detectNote = function() {\n      self.analyser.getFloatTimeDomainData(self.buffer);\n      var detectedNote = noteDetectorService.detectKeyNum(self.buffer);\n\n      document.getElementById('stuff').innerHTML = detectedNote;\n    };\n\n    this.init();\n  }\n]);\n"]}