{"version":3,"sources":["note-detector_test.js"],"names":[],"mappings":"AAAA;;AAEA,SAAS,gBAAT,EAA2B,YAAW;AACpC,MAAI,YAAJ,CADoC;AAEpC,MAAI,WAAJ,CAFoC;;AAIpC,aAAW,OAAO,kCAAP,CAAX,EAJoC;AAKpC,aAAW,OAAO,qCAAP,CAAX,EALoC;;AAOpC,aAAW,OAAO,UAAS,mBAAT,EAA8B,kBAA9B,EAAkD;AAClE,mBAAe,mBAAf,CADkE;AAElE,kBAAc,kBAAd,CAFkE;GAAlD,CAAlB,EAPoC;;AAYpC,WAAS,sDAAT,EAAiE,YAAW;AAC1E,aAAS,sBAAT,EAAiC,YAAW;AAC1C,iBAAW,YAAW;AACpB,qBAAa,aAAb,CAA2B,KAA3B,EADoB;AAEpB,qBAAa,gBAAb,GAAgC,EAAhC,CAFoB;OAAX,CAAX,CAD0C;;AAM1C,WAAK,IAAI,IAAI,CAAJ,EAAO,KAAK,EAAL,EAAS,GAAzB,EAA8B;AAC5B,WAAG,aAAa,CAAb,GAAiB,GAAjB,EAAsB,YAAW;;AAElC,cAAI,WAAW,YAAY,kBAAZ,CAA+B,CAA/B,CAAX;;;AAF8B,cAK9B,eAAe,aAAa,YAAb,CAA0B,QAA1B,CAAf;;;AAL8B,gBAQlC,CAAO,YAAP,EAAqB,OAArB,CAA6B,CAA7B,EARkC;SAAX,CAAzB,CAD4B;OAA9B;KAN+B,CAAjC,CAD0E;GAAX,CAAjE,CAZoC;;AAkCpC,WAAS,6CAAT,EAAwD,YAAW;AACjE,eAAW,YAAW;AACpB,mBAAa,aAAb,CAA2B,KAA3B,EADoB;AAEpB,mBAAa,oBAAb,GAAoC,CAApC,CAFoB;KAAX,CAAX,CADiE;;AAMjE,OAAG,gDAAH,EAAqD,YAAW;;AAE9D,mBAAa,gBAAb,GAAgC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAhC;;;AAF8D,UAK1D,cAAc,aAAa,oBAAb,CAAkC,CAAlC,CAAd;;;AAL0D,YAQ9D,CAAO,WAAP,EAAoB,OAApB,CAA4B,CAA5B,EAR8D;AAS9D,aAAO,aAAa,gBAAb,CAAP,CAAsC,OAAtC,CAA8C,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAA9C,EAT8D;KAAX,CAArD,CANiE;;AAkBjE,OAAG,oCAAH,EAAyC,YAAW;;AAElD,mBAAa,gBAAb,GAAgC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAhC;;;AAFkD,UAK9C,cAAc,aAAa,oBAAb,CAAkC,CAAlC,CAAd;;;AAL8C,YAQlD,CAAO,WAAP,EAAoB,OAApB,CAA4B,CAA5B,EARkD;AASlD,aAAO,aAAa,gBAAb,CAAP,CAAsC,OAAtC,CAA8C,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAA9C,EATkD;KAAX,CAAzC,CAlBiE;;AA8BjE,OAAG,uCAAH,EAA4C,YAAW;;AAErD,mBAAa,gBAAb,GAAgC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,CAAhC;;;AAFqD,UAKjD,cAAc,aAAa,oBAAb,CAAkC,CAAlC,CAAd;;;AALiD,YAQrD,CAAO,WAAP,EAAoB,OAApB,CAA4B,CAA5B,EARqD;AASrD,aAAO,aAAa,gBAAb,CAAP,CAAsC,OAAtC,CAA8C,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAA9C,EATqD;KAAX,CAA5C,CA9BiE;GAAX,CAAxD,CAlCoC;CAAX,CAA3B","file":"note-detector_test-compiled.js","sourcesContent":["'use strict';\n\ndescribe('Pitch detector', function() {\n  var noteDetector;\n  var perfectNote;\n\n  beforeEach(module('pianoPitchDetector.note-detector'));\n  beforeEach(module('pianoPitchDetector.waveform-helpers'));\n\n  beforeEach(inject(function(noteDetectorService, perfectNoteService) {\n    noteDetector = noteDetectorService;\n    perfectNote = perfectNoteService;\n  }));\n\n  describe('the note detector should correctly identify the note', function() {\n    describe('of an ideal waveform', function() {\n      beforeEach(function() {\n        noteDetector.setSampleRate(44100);\n        noteDetector.detectedKeyQueue = [];\n      });\n\n      for (var i = 0; i <= 87; i++) {\n        it('of note ' + i + '.', function() {\n          // Given a perfect waveform\n          var waveform = perfectNote.getPerfectWaveform(i);\n\n          // When we detect the note that is present\n          var detectedNote = noteDetector.detectKeyNum(waveform);\n\n          // Then we expect it to be correct\n          expect(detectedNote).toEqual(i);\n        });\n      }\n    });\n  });\n\n  describe('the note detector should smooth out results', function() {\n    beforeEach(function() {\n      noteDetector.setSampleRate(44100);\n      noteDetector.NUM_MATCHES_REQUIRED = 3;\n    });\n\n    it('when the same result is repeated enough times.', function() {\n      // Given a history with a result that repeats enough times\n      noteDetector.detectedKeyQueue = [1,1,1,2];\n\n      // When we add a new result that doesn\\'t create a new run\n      var keyToReturn = noteDetector.determineKeyToReturn(3);\n\n      // Then we expect the historical run to be returned\n      expect(keyToReturn).toEqual(1);\n      expect(noteDetector.detectedKeyQueue).toEqual([1,1,1,2,3]);\n    });\n\n    it('when there aren\\'t enough results.', function() {\n      // Given a history with no run\n      noteDetector.detectedKeyQueue = [1,1,2];\n\n      // When we add a result that doesn\\'t create a new run\n      var keyToReturn = noteDetector.determineKeyToReturn(3);\n\n      // Then we expect the new result to be returned\n      expect(keyToReturn).toEqual(3);\n      expect(noteDetector.detectedKeyQueue).toEqual([1,1,2,3]);\n    });\n\n    it('when a new run is about to be formed.', function() {\n      // Given a history with a run\n      noteDetector.detectedKeyQueue = [1,1,1,2,3,3];\n\n      // When we add a result that creates a new run\n      var keyToReturn = noteDetector.determineKeyToReturn(3);\n\n      // Then we expect the new run to be returned\n      expect(keyToReturn).toEqual(3);\n      expect(noteDetector.detectedKeyQueue).toEqual([3,3,3]);\n    });\n  });\n});\n"]}