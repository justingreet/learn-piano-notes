{"version":3,"sources":["note-trainer-directive.js"],"names":[],"mappings":";;;;;;AAAA,kBAAkB,SAAlB,CAA4B,aAA5B,EAA2C,YAAY;AACrD,MAAM,eAAe,EAAf,CAD+C;;AAGrD,MAAM,sBAAsB,EAAtB,CAH+C;;AAKrD,MAAM,eAAe,GAAf,CAL+C;AAMrD,MAAM,cAAc,GAAd,CAN+C;AAOrD,MAAM,sBAAsB,CAAtB,CAP+C;AAQrD,MAAM,YAAY,CAAZ,CAR+C;;AAUrD,MAAI,IAAJ,CAVqD;;AAYrD,MAAI,eAAe,IAAf,CAZiD;;MAc/C;AACJ,aADI,KACJ,CAAY,GAAZ,EAAiB,IAAjB,EAAuB,OAAvB,EAAgC,GAAhC,EAAqC;4BADjC,OACiC;;AACnC,WAAK,GAAL,GAAW,GAAX,CADmC;AAEnC,WAAK,IAAL,GAAY,IAAZ,CAFmC;AAGnC,WAAK,OAAL,GAAe,OAAf,CAHmC;AAInC,WAAK,GAAL,GAAW,GAAX,CAJmC;;AAMnC,WAAK,QAAL,GAAgB,KAAhB,CANmC;;AAQnC,WAAK,wBAAL,GAAgC,KAAhC,CARmC;KAArC;;iBADI;;mCAYS,cAAc;AACzB,YAAI,iBAAiB,KAAK,OAAL,EAAc;AACjC,eAAK,wBAAL,GAAgC,IAAhC,CADiC;SAAnC;;;;8BAKM;AACN,aAAK,QAAL,GAAgB,IAAhB,CADM;;;;6BAID;AACL,aAAK,QAAL,GAAgB,KAAhB,CADK;;;;gCAIG,QAAQ;AAChB,aAAK,GAAL,GAAW,MAAX,CADgB;;;;6BAIX;AACL,YAAI,MAAM,KAAK,GAAL;;;AADL,YAID,WAAW,IAAI,WAAJ,CAJV;AAKL,YAAI,WAAW,IAAI,SAAJ;;;AALV,YAQC,iBAAiB,KAAK,QAAL,GACnB,CADmB,GAEnB,CAFmB,CARlB;AAWL,YAAI,SAAJ,GAAgB,cAAhB,CAXK;AAYL,YAAI,WAAJ,GAAkB,KAAK,wBAAL,GACd,OADc,GAEd,OAFc;;;AAZb,WAiBL,CAAI,SAAJ,GAjBK;AAkBL,YAAI,MAAJ,CAAW,KAAK,IAAL,EAAW,KAAK,GAAL,CAAtB,CAlBK;;AAoBL,YAAI,OAAO,IAAP;;;;AApBC,YAwBD,eAAe,EAAf;;;;AAxBC,YA4BD,eAAe,CAAC,eAAgB,KAAK,cAAL,CAAjB,GAAyC,YAAzC,CA5Bd;;AA8BL,YAAI,gBAAgB,SAAhB,aAAgB,CAAS,GAAT,EAAc;AAChC,eAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,CAAJ,EAAO,GAAvB,EAA4B;AAC1B,gBAAI,SAAS,MAAM,KAAG,iBAAiB,YAAjB,CAAH,CADO;AAE1B,gBAAI,MAAJ,CAAW,KAAK,IAAL,EAAW,MAAtB,EAF0B;AAG1B,gBAAI,MAAJ,CAAW,KAAK,IAAL,GAAY,WAAZ,EAAyB,MAApC,EAH0B;WAA5B;;AAMA,iBAAO,CAAC,GAAI,YAAJ,GAAqB,IAAI,cAAJ,CAPG;SAAd;;;AA9Bf,YAyCD,mBAAmB,cAAc,KAAK,GAAL,CAAjC;;AAzCC,YA2CD,qBAAqB,CAAC,GAAI,YAAJ,GAAoB,cAArB;;;;AA3CpB,qBA+CL,CAAc,KAAK,GAAL,GAAW,gBAAX,GAA8B,kBAA9B,CAAd;;;AA/CK,WAkDL,CAAI,MAAJ,CAAW,KAAK,IAAL,GAAY,WAAZ,EAAyB,KAAK,GAAL,CAApC,CAlDK;AAmDL,YAAI,MAAJ,CAAW,KAAK,IAAL,GAAY,WAAZ,EAAyB,KAAK,GAAL,GAAW,YAAX,CAApC,CAnDK;;AAqDL,YAAI,yBAAyB,SAAzB,sBAAyB,CAAS,OAAT,EAAkB;;;;;AAK7C,cAAI,oBAAoB,CAApB,CALyC;AAM7C,cAAI,UAAU,UAAU,EAAV,CAN+B;AAO7C,cAAI,qBAAqB,KAAK,KAAL,CAAW,UAAU,EAAV,CAAhC,CAPyC;;AAS7C,cAAI,2BAA2B,UAAU,EAAV,CATc;;AAW7C,cAAI,6BAA6B,CAA7B,CAXyC;AAY7C,kBAAQ,wBAAR;AACE,iBAAK,CAAL;AACE,2CAA6B,CAA7B,CADF;AAEE,oBAFF;AADF,iBAIO,CAAL;AACE,2CAA6B,CAA7B,CADF;AAEE,oBAFF;AAJF,iBAOO,CAAL;AACE,2CAA6B,CAA7B,CADF;AAEE,oBAFF;AAPF,iBAUO,CAAL;AACE,2CAA6B,CAA7B,CADF;AAEE,oBAFF;AAVF,iBAaO,CAAL;AACE,2CAA6B,CAA7B,CADF;AAEE,oBAFF;AAbF,iBAgBO,CAAL;AACE,2CAA6B,CAA7B,CADF;AAEE,oBAFF;AAhBF,iBAmBO,EAAL;AACE,2CAA6B,CAA7B,CADF;AAEE,oBAFF;AAnBF,WAZ6C;AAmC7C,cAAI,oBAAoB,qBACnB,qBAAqB,iBAArB,GACD,0BAFoB,CAnCqB;;AAuC7C,iBAAO,iBAAP,CAvC6C;SAAlB;;AArDxB,YA+FD,cAAc,KAAK,IAAL,GAAY,EAAZ,CA/Fb;AAgGL,YAAI,aAAa,eAAe,CAAf;;AAhGZ,YAkGD,qBAAqB,uBAAuB,KAAK,OAAL,CAA5C,CAlGC;AAmGL,YAAI,qBAAqB,KAAK,KAAL,CAAW,qBAAqB,CAArB,CAAX,GAAqC,CAArC,CAnGpB;AAoGL,YAAI,cAAc,KAAK,GAAL,GAAW,YAAX,IACb,sBAAsB,eAAe,CAAf,CAAtB,GACA,qBAAqB,cAArB,CAFa,CApGb;;AAwGL,YAAI,MAAJ,CAAW,cAAc,UAAd,EAA0B,WAArC,EAxGK;AAyGL,YAAI,GAAJ,CAAQ,WAAR,EAAqB,WAArB,EAAkC,UAAlC,EAA8C,CAA9C,EAAiD,IAAI,KAAK,EAAL,CAArD;;;;;;;;AAzGK,WAiHL,CAAI,MAAJ;;;AAjHK,WAoHL,CAAI,MAAJ,CAAW,KAAK,IAAL,EAAW,KAAK,GAAL,CAAtB,CApHK;AAqHL,YAAI,SAAJ;;;AArHK,WAwHL,CAAI,UAAJ,GAAiB,QAAjB,CAxHK;AAyHL,YAAI,SAAJ,GAAgB,QAAhB,CAzHK;;;;WA9BH;MAd+C;;MAyK/C;AACJ,aADI,IACJ,CAAY,GAAZ,EAAiB,GAAjB,EAAoC;UAAd,iEAAW,iBAAG;;4BADhC,MACgC;;AAClC,UAAM,UAAU,EAAV,CAD4B;AAElC,UAAM,UAAU,EAAV,CAF4B;;AAIlC,WAAK,GAAL,GAAW,GAAX,CAJkC;AAKlC,WAAK,GAAL,GAAW,GAAX,CALkC;AAMlC,WAAK,IAAL,GAAY,QAAZ,CANkC;;AAQlC,WAAK,KAAL,GAAa,cAAY,mBAAZ,CARqB;;AAUlC,WAAK,QAAL,GAAgB,KAAhB,CAVkC;AAWlC,WAAK,gBAAL,GAAwB,CAAC,CAAD,CAXU;;AAalC,WAAK,MAAL,GAAc,EAAd,CAbkC;AAclC,WAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,mBAAJ,EAAyB,GAAzC,EAA8C;AAC5C,YAAI,UAAU,KAAK,KAAL,CAAW,KAAK,MAAL,MAAe,UAAU,OAAV,CAAf,GAAoC,OAApC,CAArB,CADwC;AAE5C,eAAO,KAAK,mBAAL,CAAyB,OAAzB,CAAP,EAA0C;AACxC,oBAAU,KAAK,KAAL,CAAW,KAAK,MAAL,MAAe,UAAU,OAAV,CAAf,GAAoC,OAApC,CAArB,CADwC;SAA1C;AAGA,aAAK,MAAL,CAAY,IAAZ,CAAiB,IAAI,KAAJ,CAAU,GAAV,EAAe,IAAE,WAAF,EAC5B,OADa,EACJ,KAAK,GAAL,CADb,EAL4C;OAA9C;KAdF;;iBADI;;8BAyBI;AACN,aAAK,QAAL,GAAgB,IAAhB,CADM;AAEN,aAAK,gBAAL,GAAwB,CAAxB,CAFM;AAGN,aAAK,MAAL,CAAY,CAAZ,EAAe,KAAf,GAHM;;;;6BAMD;AACL,aAAK,QAAL,GAAgB,KAAhB,CADK;AAEL,aAAK,MAAL,CAAY,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAArB,CAAZ,CAAoC,IAApC,GAFK;;;;mCAKM,cAAc;AACzB,YAAI,KAAK,gBAAL,IAAwB,CAAxB,EAA2B;AAC7B,eAAK,MAAL,CAAY,KAAK,gBAAL,CAAZ,CAAmC,YAAnC,CAAgD,YAAhD,EAD6B;SAA/B;;;;gCAKQ,QAAQ;AAChB,aAAK,MAAL,CAAY,OAAZ,CAAoB,iBAAS;AAC3B,gBAAM,SAAN,CAAgB,MAAhB,EAD2B;SAAT,CAApB,CADgB;;AAKhB,aAAK,GAAL,GAAW,MAAX,CALgB;;;;2BAQb,eAAe;AAClB,YAAI,KAAK,QAAL,EAAe;AACjB,cAAI,sBAAsB,KAAK,KAAL,CAAW,gBAAgB,WAAhB,CAAjC,CADa;AAEjB,cAAI,wBAAwB,KAAK,gBAAL,EAAuB;AACjD,iBAAK,MAAL,CAAY,KAAK,gBAAL,CAAZ,CAAmC,IAAnC,GADiD;AAEjD,iBAAK,MAAL,CAAY,mBAAZ,EAAiC,KAAjC,GAFiD;AAGjD,iBAAK,gBAAL,GAAwB,mBAAxB,CAHiD;WAAnD;SAFF;AAQA,aAAK,MAAL,CAAY,OAAZ,CAAoB;iBAAS,MAAM,IAAN;SAAT,CAApB,CATkB;;;;WAlDhB;MAzK+C;;MAwO/C;AACJ,aADI,qBACJ,CAAY,MAAZ,EAAoB,mBAApB,EAAyC,WAAzC,EAAsD;;;4BADlD,uBACkD;;AAEpD,aAAO,WAAP;;;AAFoD,YAKpD,CAAO,MAAP,CAAc,YAAM;AAClB,eAAO,OAAO,SAAP,CADW;OAAN,EAEX,kBAAU;AACX,YAAI,MAAJ,EAAY;AACV,gBAAK,KAAL,GADU;SAAZ,MAEO;AACL,gBAAK,KAAL,GADK;SAFP;OADC,CAFH,CALoD;;AAepD,WAAK,WAAL,GAAmB,KAAK,sBAAsB,WAAtB,CAf4B;AAgBpD,WAAK,YAAL,GAAoB,KAAM,YAAY,YAAZ,GACtB,CAAC,YAAY,CAAZ,CAAD,GAAkB,mBAAlB,CAjBgD;;AAmBpD,UAAI,IAAI,SAAS,cAAT,CAAwB,YAAxB,CAAJ,CAnBgD;AAoBpD,WAAK,GAAL,GAAW,EAAE,UAAF,CAAa,IAAb,CAAX,CApBoD;;AAsBpD,WAAK,SAAL,GAAiB,KAAjB,CAtBoD;;AAwBpD,WAAK,KAAL,GAAa,EAAb,CAxBoD;AAyBpD,WAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,SAAJ,EAAe,GAA/B,EAAoC;AAClC,aAAK,KAAL,CAAW,IAAX,CACI,IAAI,IAAJ,CAAS,IAAE,YAAF,GAAiB,IAAE,mBAAF,EAAuB,KAAK,GAAL,CADrD,EADkC;OAApC;AAIA,WAAK,KAAL,CAAW,CAAX,EAAc,KAAd,GA7BoD;;AA+BpD,WAAK,aAAL,GAAqB,CAArB,CA/BoD;AAgCpD,WAAK,gBAAL,GAAwB,CAAxB,CAhCoD;;AAkCpD,0BAAoB,gBAApB,CAAqC,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAArC,EAlCoD;;AAoCpD,aAAO,UAAP,CAAkB;eAAM,MAAK,IAAL;OAAN,EAAmB,EAArC,EApCoD;KAAtD;;iBADI;;mCAwCS,cAAc;AACzB,aAAK,KAAL,CAAW,CAAX,EAAc,YAAd,CAA2B,YAA3B,EADyB;;;;8BAInB;;;AACN,aAAK,SAAL,GAAiB,IAAjB,CADM;AAEN,aAAK,eAAL,GACI,OAAO,WAAP,CAAmB;iBAAM,OAAK,MAAL;SAAN,EAAqB,YAAxC,CADJ,CAFM;;;;8BAMA;AACN,aAAK,SAAL,GAAiB,KAAjB,CADM;AAEN,sBAAc,KAAK,eAAL,CAAd,CAFM;;;;+BAKC;AACP,aAAK,IAAL;;;AADO,YAIH,UAAU,KAAK,KAAL,CAAW,CAAX,CAAV,CAJG;;AAMP,aAAK,gBAAL,IAAyB,YAAzB,CANO;AAOP,YAAI,0BACA,KAAK,gBAAL,IAAyB,sBAAoB,YAApB,CAAzB,CARG;AASP,YAAI,2BAA2B,CAA3B,EAA8B;;AAEhC,cAAI,UAAU,YAAY,CAAZ,CAFkB;AAGhC,cAAI,WAAW,UAAU,YAAV,GAAyB,UAAU,mBAAV,CAHR;AAIhC,cAAI,UAAU,IAAI,IAAJ,CAAS,QAAT,EAAmB,KAAK,GAAL,CAA7B;;;AAJ4B,cAOhC,CAAK,KAAL,CAAW,CAAX,EAAc,IAAd,GAPgC;AAQhC,eAAK,KAAL,CAAW,MAAX,CAAkB,CAAlB,EAAqB,CAArB;;;AARgC,cAWhC,CAAK,KAAL,CAAW,OAAX,CAAmB,gBAAQ;AACzB,iBAAK,SAAL,CAAe,KAAK,GAAL,IAAY,eAAe,mBAAf,CAAZ,CAAf,CADyB;WAAR,CAAnB,CAXgC;AAchC,eAAK,KAAL,CAAW,CAAX,EAAc,KAAd;;;AAdgC,cAiBhC,CAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB,EAjBgC;;AAmBhC,eAAK,gBAAL,GAAwB,CAAxB,CAnBgC;AAoBhC,oCAA0B,CAA1B,CApBgC;AAqBhC,eAAK,IAAL,GArBgC;SAAlC;;AAwBA,aAAK,aAAL,GAAqB,0BAA0B,QAAQ,KAAR,CAjCxC;;;;6BAoCF;;;AACL,YAAI,MAAM,KAAK,GAAL;;;AADL,WAIL,CAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAK,WAAL,EAAkB,KAAK,YAAL,CAAtC;;;AAJK,YAOL,CAAK,KAAL,CAAW,OAAX,CAAmB;iBAAQ,KAAK,IAAL,CAAU,OAAK,aAAL;SAAlB,CAAnB;;;AAPK,YAUD,iBAAiB,IAAI,WAAJ,CAVhB;AAWL,YAAI,SAAJ,GAXK;AAYL,YAAI,WAAJ,GAAkB,SAAlB,CAZK;AAaL,YAAI,MAAJ,CAAW,KAAK,aAAL,EAAoB,CAA/B,EAbK;AAcL,YAAI,MAAJ,CAAW,KAAK,aAAL,EAAoB,YAA/B,EAdK;AAeL,YAAI,MAAJ,GAfK;AAgBL,YAAI,WAAJ,GAAkB,cAAlB,CAhBK;;;;WA3FH;MAxO+C;;AAuVrD,SAAO;AACL,cAAU,GAAV;AACA,WAAO;AACL,iBAAW,GAAX;KADF;AAGA,gBAAY,qBAAZ;AACA,kBAAc,MAAd;AACA,iBAAa,2CAAb;GAPF,CAvVqD;CAAZ,CAA3C","file":"note-trainer-directive-compiled.js","sourcesContent":["noteTrainerModule.directive('noteTrainer', function () {\n  const REFRESH_TIME = 40;\n\n  const SPACE_BETWEEN_LINES = 50;\n\n  const STAFF_HEIGHT = 200;\n  const STAFF_WIDTH = 300;\n  const NUM_STAFFS_PER_LINE = 3;\n  const NUM_LINES = 3;\n\n  var util;\n\n  var timePerStaff = 2500;\n\n  class Staff {\n    constructor(top, left, noteNum, ctx) {\n      this.top = top;\n      this.left = left;\n      this.noteNum = noteNum;\n      this.ctx = ctx;\n\n      this.isActive = false;\n\n      this.hasCorrectNoteBeenPlayed = false;\n    }\n\n    noteDetected(detectedNote) {\n      if (detectedNote === this.noteNum) {\n        this.hasCorrectNoteBeenPlayed = true;\n      }\n    }\n\n    enter() {\n      this.isActive = true;\n    }\n\n    exit() {\n      this.isActive = false;\n    }\n\n    updateTop(newTop) {\n      this.top = newTop;\n    }\n\n    draw() {\n      let ctx = this.ctx;\n\n      // Store the old values.\n      let oldStyle = ctx.strokeStyle;\n      let oldWidth = ctx.lineWidth;\n\n      // Set the new values.\n      const LINE_THICKNESS = this.isActive ?\n          4 :\n          1;\n      ctx.lineWidth = LINE_THICKNESS;\n      ctx.strokeStyle = this.hasCorrectNoteBeenPlayed ?\n          'green' :\n          'black';\n\n      // Begin the new path for the staff.\n      ctx.beginPath();\n      ctx.moveTo(this.left, this.top);\n\n      let self = this;\n\n      // There are 4 empty spots in the treble clef, 2 empty slots in\n      // between the clefs, and 4 empty slots in the bass clef.\n      let numNoteSlots = 10;\n\n      // Need to leave space for the 5 lines of treble clef, 1 line for\n      // middle c, and 5 lines of bass clef.\n      let heightOfNote = (STAFF_HEIGHT - (11 * LINE_THICKNESS)) / numNoteSlots;\n\n      let drawFiveLines = function(top) {\n        for (let i = 0; i < 5; i++) {\n          let curTop = top + i*(LINE_THICKNESS + heightOfNote);\n          ctx.moveTo(self.left, curTop);\n          ctx.lineTo(self.left + STAFF_WIDTH, curTop);\n        }\n\n        return (4 * heightOfNote) + (5 * LINE_THICKNESS);\n      };\n\n      // Draw treble clef.\n      let trebleClefHeight = drawFiveLines(this.top);\n      // The vertical space needed for the 3 notes that sit between clefs.\n      let heightBetweenClefs = (2 * heightOfNote) + LINE_THICKNESS;\n\n      // Draw bass clef. Leave space above it for treble clef and notes in\n      // between clefs.\n      drawFiveLines(this.top + trebleClefHeight + heightBetweenClefs);\n\n      // Draw the vertical line separating staffs.\n      ctx.moveTo(this.left + STAFF_WIDTH, this.top);\n      ctx.lineTo(this.left + STAFF_WIDTH, this.top + STAFF_HEIGHT);\n\n      let calcNumStepsAboveFloor = function(noteNum) {\n        // Even though it's incorrect, a step in this context is the number\n        // of space above the bottom of the bass clef a note is located. So,\n        // note 23 has a step of 0, note 25 has a step of 1, note 27 has a\n        // step of 2, note 40 has a step of 10.\n        let numStepsPerOctave = 6;\n        let newZero = noteNum - 23;\n        let numOctavesFromZero = Math.floor(newZero / 12);\n\n        let numKeysFromStartOfOctave = newZero % 12;\n\n        let numStepsAboveStartOfOctave = 0;\n        switch (numKeysFromStartOfOctave) {\n          case 0:\n            numStepsAboveStartOfOctave = 0;\n            break;\n          case 2:\n            numStepsAboveStartOfOctave = 1;\n            break;\n          case 4:\n            numStepsAboveStartOfOctave = 2;\n            break;\n          case 5:\n            numStepsAboveStartOfOctave = 3;\n            break;\n          case 7:\n            numStepsAboveStartOfOctave = 4;\n            break;\n          case 9:\n            numStepsAboveStartOfOctave = 5;\n            break;\n          case 10:\n            numStepsAboveStartOfOctave = 6;\n            break;\n        }\n        let numStepsAboveZero = numOctavesFromZero +\n            (numOctavesFromZero * numStepsPerOctave) +\n            numStepsAboveStartOfOctave;\n\n        return numStepsAboveZero;\n      };\n      // Draw a circle on the staff to represent the note to be played.\n      let noteXCenter = this.left + 20;\n      let noteRadius = heightOfNote / 2;\n      // 57 is highest note in treble cleff.\n      let numStepsAboveFloor = calcNumStepsAboveFloor(this.noteNum);\n      let numLinesToSubtract = Math.floor(numStepsAboveFloor / 2) + 1;\n      let noteYCenter = this.top + STAFF_HEIGHT -\n          (numStepsAboveFloor * (heightOfNote / 2) +\n          (numLinesToSubtract * LINE_THICKNESS));\n\n      ctx.moveTo(noteXCenter + noteRadius, noteYCenter);\n      ctx.arc(noteXCenter, noteYCenter, noteRadius, 0, 2 * Math.PI);\n\n/*      // Draw some text.\n      ctx.fillText(this.noteNum,\n          this.left + (STAFF_WIDTH*.5),\n          this.top+(STAFF_HEIGHT*.5));*/\n\n      // Actually draw the lines.\n      ctx.stroke();\n\n      // Finish off the staff's path.\n      ctx.moveTo(this.left, this.top);\n      ctx.closePath();\n\n      // Restore the old values.\n      ctx.strokeStle = oldStyle;\n      ctx.lineWidth = oldWidth;\n    }\n  }\n\n  class Line {\n    constructor(top, ctx, opt_left = 0) {\n      const maxNote = 57;\n      const minNote = 23;\n\n      this.top = top;\n      this.ctx = ctx;\n      this.left = opt_left;\n\n      this.width = STAFF_WIDTH*NUM_STAFFS_PER_LINE;\n\n      this.isActive = false;\n      this.activeStaffIndex = -1;\n\n      this.staffs = [];\n      for (let i = 0; i < NUM_STAFFS_PER_LINE; i++) {\n        var noteNum = Math.round(Math.random()*(maxNote - minNote) + minNote);\n        while (util.isKeyNumFlatOrSharp(noteNum)) {\n          noteNum = Math.round(Math.random()*(maxNote - minNote) + minNote);\n        }\n        this.staffs.push(new Staff(top, i*STAFF_WIDTH,\n            noteNum, this.ctx));\n      }\n    }\n\n    enter() {\n      this.isActive = true;\n      this.activeStaffIndex = 0;\n      this.staffs[0].enter();\n    }\n\n    exit() {\n      this.isActive = false;\n      this.staffs[this.staffs.length - 1].exit();\n    }\n\n    noteDetected(detectedNote) {\n      if (this.activeStaffIndex >=0) {\n        this.staffs[this.activeStaffIndex].noteDetected(detectedNote);\n      }\n    }\n\n    updateTop(newTop) {\n      this.staffs.forEach(staff => {\n        staff.updateTop(newTop);\n      });\n\n      this.top = newTop;\n    }\n\n    draw(progressLineX) {\n      if (this.isActive) {\n        let newActiveStaffIndex = Math.floor(progressLineX / STAFF_WIDTH);\n        if (newActiveStaffIndex !== this.activeStaffIndex) {\n          this.staffs[this.activeStaffIndex].exit();\n          this.staffs[newActiveStaffIndex].enter();\n          this.activeStaffIndex = newActiveStaffIndex;\n        }\n      }\n      this.staffs.forEach(staff => staff.draw());\n    }\n  }\n\n  class NoteTrainerController {\n    constructor($scope, noteDetectorService, utilService) {\n\n      util = utilService;\n\n      // Listen for when the user toggles play/pause.\n      $scope.$watch(() => {\n        return $scope.isPlaying;\n      }, newVal => {\n        if (newVal) {\n          this.start();\n        } else {\n          this.pause();\n        }\n      });\n\n      this.canvasWidth = 10 + NUM_STAFFS_PER_LINE * STAFF_WIDTH;\n      this.canvasHeight = 10 + (NUM_LINES * STAFF_HEIGHT) +\n          (NUM_LINES - 1) * SPACE_BETWEEN_LINES;\n\n      var c = document.getElementById(\"sheetMusic\");\n      this.ctx = c.getContext(\"2d\");\n\n      this.isPlaying = false;\n\n      this.lines = [];\n      for (let i = 0; i < NUM_LINES; i++) {\n        this.lines.push(\n            new Line(i*STAFF_HEIGHT + i*SPACE_BETWEEN_LINES, this.ctx));\n      }\n      this.lines[0].enter();\n\n      this.progressLineX = 0;\n      this.progressLineTime = 0;\n\n      noteDetectorService.registerListener(this.noteDetected.bind(this));\n\n      window.setTimeout(() => this.draw(), 10);\n    }\n\n    noteDetected(detectedNote) {\n      this.lines[0].noteDetected(detectedNote);\n    }\n\n    start() {\n      this.isPlaying = true;\n      this.refreshInterval =\n          window.setInterval(() => this.update(), REFRESH_TIME);\n    }\n\n    pause() {\n      this.isPlaying = false;\n      clearInterval(this.refreshInterval);\n    }\n\n    update() {\n      this.draw();\n\n      // Update the progress line.\n      let curLine = this.lines[0];\n\n      this.progressLineTime += REFRESH_TIME;\n      let percentageOfLineCovered =\n          this.progressLineTime / (NUM_STAFFS_PER_LINE*timePerStaff);\n      if (percentageOfLineCovered >= 1) {\n        // Generate a new line.\n        let lineNum = NUM_LINES - 1;\n        let newLineY = lineNum * STAFF_HEIGHT + lineNum * SPACE_BETWEEN_LINES;\n        let newLine = new Line(newLineY, this.ctx);\n\n        // Remove top line.\n        this.lines[0].exit();\n        this.lines.splice(0, 1);\n\n        // Move all existing lines up.\n        this.lines.forEach(line => {\n          line.updateTop(line.top - (STAFF_HEIGHT + SPACE_BETWEEN_LINES));\n        });\n        this.lines[0].enter();\n\n        // Add new line to bottom.\n        this.lines.push(newLine);\n\n        this.progressLineTime = 0;\n        percentageOfLineCovered = 0;\n        this.draw();\n      }\n\n      this.progressLineX = percentageOfLineCovered * curLine.width;\n    }\n\n    draw() {\n      let ctx = this.ctx;\n\n      // Clear the canvas.\n      ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      // Draw the sheet music.\n      this.lines.forEach(line => line.draw(this.progressLineX));\n\n      // Draw the progress line.\n      let oldStrokeStyle = ctx.strokeStyle;\n      ctx.beginPath();\n      ctx.strokeStyle = '#FF0000';\n      ctx.moveTo(this.progressLineX, 0);\n      ctx.lineTo(this.progressLineX, STAFF_HEIGHT);\n      ctx.stroke();\n      ctx.strokeStyle = oldStrokeStyle;\n    }\n  }\n\n  return {\n    restrict: 'E',\n    scope: {\n      isPlaying: '='\n    },\n    controller: NoteTrainerController,\n    controllerAs: 'ctrl',\n    templateUrl: 'components/note-trainer/note-trainer.html'\n  };\n});"]}