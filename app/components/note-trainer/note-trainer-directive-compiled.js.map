{"version":3,"sources":["note-trainer-directive.js"],"names":[],"mappings":"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","file":"note-trainer-directive-compiled.js","sourcesContent":["noteTrainerModule.directive('noteTrainer', function () {\n  const REFRESH_TIME = 40;\n\n  const SPACE_BETWEEN_LINES = 50;\n\n  const STAFF_HEIGHT = 200;\n  const STAFF_WIDTH = 300;\n  const NUM_STAFFS_PER_LINE = 3;\n  const NUM_LINES = 3;\n\n  var timePerStaff = 2000;\n\n  class Staff {\n    constructor(top, left, noteNum, ctx) {\n      this.top = top;\n      this.left = left;\n      this.noteNum = noteNum;\n      this.ctx = ctx;\n\n      this.isActive = false;\n    }\n\n    noteDetected(detectedNote) {\n\n    }\n\n    enter() {\n      this.isActive = true;\n    }\n\n    exit() {\n      this.isActive = false;\n    }\n\n    updateTop(newTop) {\n      this.top = newTop;\n    }\n\n    draw() {\n      let ctx = this.ctx;\n\n      // Draw the box.\n      ctx.beginPath();\n      ctx.moveTo(this.left, this.top);\n\n      ctx.lineWidth = (this.isActive) ?\n          5:\n          2;\n\n      ctx.lineTo(this.left + STAFF_WIDTH, this.top);\n      ctx.lineTo(this.left + STAFF_WIDTH, this.top + STAFF_HEIGHT);\n      ctx.lineTo(this.left, this.top + STAFF_HEIGHT);\n      ctx.lineTo(this.left, this.top);\n      ctx.stroke();\n\n      // Draw some text.\n      ctx.fillText(this.noteNum,\n          this.left + (STAFF_WIDTH*.5),\n          this.top+(STAFF_HEIGHT*.5));\n    }\n  }\n\n  class Line {\n    constructor(top, ctx, opt_left = 0) {\n      const maxNote = 50;\n      const minNote = 20;\n\n      this.top = top;\n      this.ctx = ctx;\n      this.left = opt_left;\n\n      this.width = STAFF_WIDTH*NUM_STAFFS_PER_LINE;\n\n      this.isActive = false;\n      this.activeStaffIndex = -1;\n\n      this.staffs = [];\n      for (let i = 0; i < NUM_STAFFS_PER_LINE; i++) {\n        var noteNum = Math.round(Math.random()*(maxNote - minNote) + minNote);\n        this.staffs.push(new Staff(top, i*STAFF_WIDTH,\n            noteNum, this.ctx));\n      }\n    }\n\n    enter() {\n      this.isActive = true;\n      this.activeStaffIndex = 0;\n      this.staffs[0].enter();\n    }\n\n    exit() {\n      this.isActive = false;\n      this.staffs[this.staffs.length - 1].exit();\n    }\n\n    noteDetected() {\n\n    }\n\n    updateTop(newTop) {\n      this.staffs.forEach(staff => {\n        staff.updateTop(newTop);\n      });\n\n      this.top = newTop;\n    }\n\n    draw(progressLineX) {\n      if (this.isActive) {\n        let newActiveStaffIndex = Math.floor(progressLineX / STAFF_WIDTH);\n        if (newActiveStaffIndex !== this.activeStaffIndex) {\n          this.staffs[this.activeStaffIndex].exit();\n          this.staffs[newActiveStaffIndex].enter();\n          this.activeStaffIndex = newActiveStaffIndex;\n        }\n      }\n      this.staffs.forEach(staff => staff.draw());\n    }\n  }\n\n  class NoteTrainerController {\n    constructor($scope, noteDetectorService) {\n\n      $scope.$watch(() => {\n        return $scope.isPlaying;\n      }, newVal => {\n        if (newVal) {\n          this.start();\n        } else {\n          this.pause();\n        }\n      });\n      this.canvasWidth = NUM_STAFFS_PER_LINE*STAFF_WIDTH;\n      this.canvasHeight = NUM_LINES*STAFF_HEIGHT +\n          (NUM_LINES - 1)*SPACE_BETWEEN_LINES;\n\n      var c = document.getElementById(\"sheetMusic\");\n      this.ctx = c.getContext(\"2d\");\n\n      this.isPlaying = false;\n\n      this.lines = [];\n      for (let i = 0; i < NUM_LINES; i++) {\n        this.lines.push(\n            new Line(i*STAFF_HEIGHT + i*SPACE_BETWEEN_LINES, this.ctx));\n      }\n      this.lines[0].enter();\n\n      this.progressLineX = 0;\n      this.progressLineTime = 0;\n\n      noteDetectorService.registerListener(this.noteDetected);\n\n      window.setTimeout(() => this.draw(), 10);\n    }\n\n    noteDetected(detectedNote) {\n      // TODO: Actually do something when a note is detected.\n    }\n\n    start() {\n      this.isPlaying = true;\n      this.refreshInterval =\n          window.setInterval(() => this.update(), REFRESH_TIME);\n    }\n\n    pause() {\n      this.isPlaying = false;\n      clearInterval(this.refreshInterval);\n    }\n\n    update() {\n      this.draw();\n\n      // Update the progress line.\n      let curLine = this.lines[0];\n\n      this.progressLineTime += REFRESH_TIME;\n      let percentageOfLineCovered =\n          this.progressLineTime / (NUM_STAFFS_PER_LINE*timePerStaff);\n      if (percentageOfLineCovered >= 1) {\n        // Generate a new line.\n        let lineNum = NUM_LINES - 1;\n        let newLineY = lineNum * STAFF_HEIGHT + lineNum * SPACE_BETWEEN_LINES;\n        let newLine = new Line(newLineY, this.ctx);\n\n        // Remove top line.\n        this.lines[0].exit();\n        this.lines.splice(0, 1);\n\n        // Move all existing lines up.\n        this.lines.forEach(line => {\n          line.updateTop(line.top - (STAFF_HEIGHT + SPACE_BETWEEN_LINES));\n        });\n        this.lines[0].enter();\n\n        // Add new line to bottom.\n        this.lines.push(newLine);\n\n        this.progressLineTime = 0;\n        percentageOfLineCovered = 0;\n        this.draw();\n      }\n\n      this.progressLineX = percentageOfLineCovered * curLine.width;\n    }\n\n    draw() {\n      let ctx = this.ctx;\n\n      // Clear the canvas.\n      ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      // Draw the sheet music.\n      this.lines.forEach(line => line.draw(this.progressLineX));\n\n      // Draw the progress line.\n      let oldStrokeStyle = ctx.strokeStyle;\n      ctx.beginPath();\n      ctx.strokeStyle = '#FF0000';\n      ctx.moveTo(this.progressLineX, 0);\n      ctx.lineTo(this.progressLineX, STAFF_HEIGHT);\n      ctx.stroke();\n      ctx.strokeStyle = oldStrokeStyle;\n    }\n  }\n\n  return {\n    restrict: 'E',\n    scope: {\n      isPlaying: '='\n    },\n    controller: NoteTrainerController,\n    controllerAs: 'ctrl',\n    templateUrl: 'components/note-trainer/note-trainer.html'\n  };\n});"]}